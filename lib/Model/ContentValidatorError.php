<?php
/**
 * ContentValidatorError
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Looker API 3.1 Reference
 *
 * ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://looker.com/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://looker.com/docs/r/api/versioning).   ### 3.1 Legacy API  API 3.1 is now **deprecated**. API 4.0 should be used instead.  The text below is retained for reference purposes.  The following are a few examples of noteworthy items that have changed between API 3.0 and API 3.1. For more comprehensive coverage of API changes, please see the release notes for your Looker release.  ### Examples of new things added in API 3.1 (compared to API 3.0):  * [Dashboard construction](#!/3.1/Dashboard/) APIs * [Themes](#!/3.1/Theme/) and [custom color collections](#!/3.1/ColorCollection) APIs * Create and run [SQL Runner](#!/3.1/Query/run_sql_query) queries * Create and run [merged results](#!/3.1/Query/create_merge_query) queries * Create and modify [dashboard filters](#!/3.1/Dashboard/create_dashboard_filter) * Create and modify [password requirements](#!/3.1/Auth/password_config)  ### Deprecated in API 3.0  The following functions and properties have been deprecated in API 3.0.  They continue to exist and work in API 3.0 for the next several Looker releases but they have not been carried forward to API 3.1:  * Dashboard Prefetch functions * User access_filter functions * User API 1.0 credentials functions * Space.is_root and Space.is_user_root properties. Use Space.is_shared_root and Space.is_users_root instead.  ### Semantic changes in API 3.1:  * [all_looks()](#!/3.1/Look/all_looks) no longer includes soft-deleted looks, matching [all_dashboards()](#!/3.1/Dashboard/all_dashboards) behavior. You can find soft-deleted looks using [search_looks()](#!/3.1/Look/search_looks) with the `deleted` param set to True. * [all_spaces()](#!/3.1/Space/all_spaces) no longer includes duplicate items * [search_users()](#!/3.1/User/search_users) no longer accepts Y,y,1,0,N,n for Boolean params, only \"true\" and \"false\". * For greater client and network compatibility, [render_task_results](#!/3.1/RenderTask/render_task_results) now returns HTTP status **202 Accepted** instead of HTTP status **102 Processing** * [all_running_queries()](#!/3.1/Query/all_running_queries) and [kill_query](#!/3.1/Query/kill_query) functions have moved into the [Query](#!/3.1/Query/) function group.  The API Explorer can be used to [interactively compare](https://looker.com/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://looker.com/docs/r/api/support-policy) for more information.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ContentValidatorError Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContentValidatorError implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContentValidatorError';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'look' => '\Swagger\Client\Model\ContentValidationLook',
        'dashboard' => '\Swagger\Client\Model\ContentValidationDashboard',
        'dashboard_element' => '\Swagger\Client\Model\ContentValidationDashboardElement',
        'dashboard_filter' => '\Swagger\Client\Model\ContentValidationDashboardFilter',
        'scheduled_plan' => '\Swagger\Client\Model\ContentValidationScheduledPlan',
        'alert' => '\Swagger\Client\Model\ContentValidationAlert',
        'lookml_dashboard' => '\Swagger\Client\Model\ContentValidationLookMLDashboard',
        'lookml_dashboard_element' => '\Swagger\Client\Model\ContentValidationLookMLDashboardElement',
        'errors' => '\Swagger\Client\Model\ContentValidationError[]',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'look' => null,
        'dashboard' => null,
        'dashboard_element' => null,
        'dashboard_filter' => null,
        'scheduled_plan' => null,
        'alert' => null,
        'lookml_dashboard' => null,
        'lookml_dashboard_element' => null,
        'errors' => null,
        'id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'look' => 'look',
        'dashboard' => 'dashboard',
        'dashboard_element' => 'dashboard_element',
        'dashboard_filter' => 'dashboard_filter',
        'scheduled_plan' => 'scheduled_plan',
        'alert' => 'alert',
        'lookml_dashboard' => 'lookml_dashboard',
        'lookml_dashboard_element' => 'lookml_dashboard_element',
        'errors' => 'errors',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'look' => 'setLook',
        'dashboard' => 'setDashboard',
        'dashboard_element' => 'setDashboardElement',
        'dashboard_filter' => 'setDashboardFilter',
        'scheduled_plan' => 'setScheduledPlan',
        'alert' => 'setAlert',
        'lookml_dashboard' => 'setLookmlDashboard',
        'lookml_dashboard_element' => 'setLookmlDashboardElement',
        'errors' => 'setErrors',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'look' => 'getLook',
        'dashboard' => 'getDashboard',
        'dashboard_element' => 'getDashboardElement',
        'dashboard_filter' => 'getDashboardFilter',
        'scheduled_plan' => 'getScheduledPlan',
        'alert' => 'getAlert',
        'lookml_dashboard' => 'getLookmlDashboard',
        'lookml_dashboard_element' => 'getLookmlDashboardElement',
        'errors' => 'getErrors',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['look'] = isset($data['look']) ? $data['look'] : null;
        $this->container['dashboard'] = isset($data['dashboard']) ? $data['dashboard'] : null;
        $this->container['dashboard_element'] = isset($data['dashboard_element']) ? $data['dashboard_element'] : null;
        $this->container['dashboard_filter'] = isset($data['dashboard_filter']) ? $data['dashboard_filter'] : null;
        $this->container['scheduled_plan'] = isset($data['scheduled_plan']) ? $data['scheduled_plan'] : null;
        $this->container['alert'] = isset($data['alert']) ? $data['alert'] : null;
        $this->container['lookml_dashboard'] = isset($data['lookml_dashboard']) ? $data['lookml_dashboard'] : null;
        $this->container['lookml_dashboard_element'] = isset($data['lookml_dashboard_element']) ? $data['lookml_dashboard_element'] : null;
        $this->container['errors'] = isset($data['errors']) ? $data['errors'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets look
     *
     * @return \Swagger\Client\Model\ContentValidationLook
     */
    public function getLook()
    {
        return $this->container['look'];
    }

    /**
     * Sets look
     *
     * @param \Swagger\Client\Model\ContentValidationLook $look look
     *
     * @return $this
     */
    public function setLook($look)
    {
        $this->container['look'] = $look;

        return $this;
    }

    /**
     * Gets dashboard
     *
     * @return \Swagger\Client\Model\ContentValidationDashboard
     */
    public function getDashboard()
    {
        return $this->container['dashboard'];
    }

    /**
     * Sets dashboard
     *
     * @param \Swagger\Client\Model\ContentValidationDashboard $dashboard dashboard
     *
     * @return $this
     */
    public function setDashboard($dashboard)
    {
        $this->container['dashboard'] = $dashboard;

        return $this;
    }

    /**
     * Gets dashboard_element
     *
     * @return \Swagger\Client\Model\ContentValidationDashboardElement
     */
    public function getDashboardElement()
    {
        return $this->container['dashboard_element'];
    }

    /**
     * Sets dashboard_element
     *
     * @param \Swagger\Client\Model\ContentValidationDashboardElement $dashboard_element dashboard_element
     *
     * @return $this
     */
    public function setDashboardElement($dashboard_element)
    {
        $this->container['dashboard_element'] = $dashboard_element;

        return $this;
    }

    /**
     * Gets dashboard_filter
     *
     * @return \Swagger\Client\Model\ContentValidationDashboardFilter
     */
    public function getDashboardFilter()
    {
        return $this->container['dashboard_filter'];
    }

    /**
     * Sets dashboard_filter
     *
     * @param \Swagger\Client\Model\ContentValidationDashboardFilter $dashboard_filter dashboard_filter
     *
     * @return $this
     */
    public function setDashboardFilter($dashboard_filter)
    {
        $this->container['dashboard_filter'] = $dashboard_filter;

        return $this;
    }

    /**
     * Gets scheduled_plan
     *
     * @return \Swagger\Client\Model\ContentValidationScheduledPlan
     */
    public function getScheduledPlan()
    {
        return $this->container['scheduled_plan'];
    }

    /**
     * Sets scheduled_plan
     *
     * @param \Swagger\Client\Model\ContentValidationScheduledPlan $scheduled_plan scheduled_plan
     *
     * @return $this
     */
    public function setScheduledPlan($scheduled_plan)
    {
        $this->container['scheduled_plan'] = $scheduled_plan;

        return $this;
    }

    /**
     * Gets alert
     *
     * @return \Swagger\Client\Model\ContentValidationAlert
     */
    public function getAlert()
    {
        return $this->container['alert'];
    }

    /**
     * Sets alert
     *
     * @param \Swagger\Client\Model\ContentValidationAlert $alert alert
     *
     * @return $this
     */
    public function setAlert($alert)
    {
        $this->container['alert'] = $alert;

        return $this;
    }

    /**
     * Gets lookml_dashboard
     *
     * @return \Swagger\Client\Model\ContentValidationLookMLDashboard
     */
    public function getLookmlDashboard()
    {
        return $this->container['lookml_dashboard'];
    }

    /**
     * Sets lookml_dashboard
     *
     * @param \Swagger\Client\Model\ContentValidationLookMLDashboard $lookml_dashboard lookml_dashboard
     *
     * @return $this
     */
    public function setLookmlDashboard($lookml_dashboard)
    {
        $this->container['lookml_dashboard'] = $lookml_dashboard;

        return $this;
    }

    /**
     * Gets lookml_dashboard_element
     *
     * @return \Swagger\Client\Model\ContentValidationLookMLDashboardElement
     */
    public function getLookmlDashboardElement()
    {
        return $this->container['lookml_dashboard_element'];
    }

    /**
     * Sets lookml_dashboard_element
     *
     * @param \Swagger\Client\Model\ContentValidationLookMLDashboardElement $lookml_dashboard_element lookml_dashboard_element
     *
     * @return $this
     */
    public function setLookmlDashboardElement($lookml_dashboard_element)
    {
        $this->container['lookml_dashboard_element'] = $lookml_dashboard_element;

        return $this;
    }

    /**
     * Gets errors
     *
     * @return \Swagger\Client\Model\ContentValidationError[]
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     *
     * @param \Swagger\Client\Model\ContentValidationError[] $errors A list of errors found for this piece of content
     *
     * @return $this
     */
    public function setErrors($errors)
    {
        $this->container['errors'] = $errors;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id An id unique to this piece of content for this validation run
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


