<?php
/**
 * ContentValidation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Looker API 3.1 Reference
 *
 * ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.  For details, see the [API Explorer documentation](https://looker.com/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://looker.com/docs/r/api/versioning).   ### 3.1 Legacy API  API 3.1 is now **deprecated**. API 4.0 should be used instead.  The text below is retained for reference purposes.  The following are a few examples of noteworthy items that have changed between API 3.0 and API 3.1. For more comprehensive coverage of API changes, please see the release notes for your Looker release.  ### Examples of new things added in API 3.1 (compared to API 3.0):  * [Dashboard construction](#!/3.1/Dashboard/) APIs * [Themes](#!/3.1/Theme/) and [custom color collections](#!/3.1/ColorCollection) APIs * Create and run [SQL Runner](#!/3.1/Query/run_sql_query) queries * Create and run [merged results](#!/3.1/Query/create_merge_query) queries * Create and modify [dashboard filters](#!/3.1/Dashboard/create_dashboard_filter) * Create and modify [password requirements](#!/3.1/Auth/password_config)  ### Deprecated in API 3.0  The following functions and properties have been deprecated in API 3.0.  They continue to exist and work in API 3.0 for the next several Looker releases but they have not been carried forward to API 3.1:  * Dashboard Prefetch functions * User access_filter functions * User API 1.0 credentials functions * Space.is_root and Space.is_user_root properties. Use Space.is_shared_root and Space.is_users_root instead.  ### Semantic changes in API 3.1:  * [all_looks()](#!/3.1/Look/all_looks) no longer includes soft-deleted looks, matching [all_dashboards()](#!/3.1/Dashboard/all_dashboards) behavior. You can find soft-deleted looks using [search_looks()](#!/3.1/Look/search_looks) with the `deleted` param set to True. * [all_spaces()](#!/3.1/Space/all_spaces) no longer includes duplicate items * [search_users()](#!/3.1/User/search_users) no longer accepts Y,y,1,0,N,n for Boolean params, only \"true\" and \"false\". * For greater client and network compatibility, [render_task_results](#!/3.1/RenderTask/render_task_results) now returns HTTP status **202 Accepted** instead of HTTP status **102 Processing** * [all_running_queries()](#!/3.1/Query/all_running_queries) and [kill_query](#!/3.1/Query/kill_query) functions have moved into the [Query](#!/3.1/Query/) function group.  The API Explorer can be used to [interactively compare](https://looker.com/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   ### API and SDK Support Policies  Looker API versions and language SDKs have varying support levels. Please read the API and SDK [support policies](https://looker.com/docs/r/api/support-policy) for more information.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ContentValidation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContentValidation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContentValidation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'content_with_errors' => '\Swagger\Client\Model\ContentValidatorError[]',
        'computation_time' => 'float',
        'total_looks_validated' => 'int',
        'total_dashboard_elements_validated' => 'int',
        'total_dashboard_filters_validated' => 'int',
        'total_scheduled_plans_validated' => 'int',
        'total_alerts_validated' => 'int',
        'total_explores_validated' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'content_with_errors' => null,
        'computation_time' => 'float',
        'total_looks_validated' => 'int64',
        'total_dashboard_elements_validated' => 'int64',
        'total_dashboard_filters_validated' => 'int64',
        'total_scheduled_plans_validated' => 'int64',
        'total_alerts_validated' => 'int64',
        'total_explores_validated' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'content_with_errors' => 'content_with_errors',
        'computation_time' => 'computation_time',
        'total_looks_validated' => 'total_looks_validated',
        'total_dashboard_elements_validated' => 'total_dashboard_elements_validated',
        'total_dashboard_filters_validated' => 'total_dashboard_filters_validated',
        'total_scheduled_plans_validated' => 'total_scheduled_plans_validated',
        'total_alerts_validated' => 'total_alerts_validated',
        'total_explores_validated' => 'total_explores_validated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'content_with_errors' => 'setContentWithErrors',
        'computation_time' => 'setComputationTime',
        'total_looks_validated' => 'setTotalLooksValidated',
        'total_dashboard_elements_validated' => 'setTotalDashboardElementsValidated',
        'total_dashboard_filters_validated' => 'setTotalDashboardFiltersValidated',
        'total_scheduled_plans_validated' => 'setTotalScheduledPlansValidated',
        'total_alerts_validated' => 'setTotalAlertsValidated',
        'total_explores_validated' => 'setTotalExploresValidated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'content_with_errors' => 'getContentWithErrors',
        'computation_time' => 'getComputationTime',
        'total_looks_validated' => 'getTotalLooksValidated',
        'total_dashboard_elements_validated' => 'getTotalDashboardElementsValidated',
        'total_dashboard_filters_validated' => 'getTotalDashboardFiltersValidated',
        'total_scheduled_plans_validated' => 'getTotalScheduledPlansValidated',
        'total_alerts_validated' => 'getTotalAlertsValidated',
        'total_explores_validated' => 'getTotalExploresValidated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['content_with_errors'] = isset($data['content_with_errors']) ? $data['content_with_errors'] : null;
        $this->container['computation_time'] = isset($data['computation_time']) ? $data['computation_time'] : null;
        $this->container['total_looks_validated'] = isset($data['total_looks_validated']) ? $data['total_looks_validated'] : null;
        $this->container['total_dashboard_elements_validated'] = isset($data['total_dashboard_elements_validated']) ? $data['total_dashboard_elements_validated'] : null;
        $this->container['total_dashboard_filters_validated'] = isset($data['total_dashboard_filters_validated']) ? $data['total_dashboard_filters_validated'] : null;
        $this->container['total_scheduled_plans_validated'] = isset($data['total_scheduled_plans_validated']) ? $data['total_scheduled_plans_validated'] : null;
        $this->container['total_alerts_validated'] = isset($data['total_alerts_validated']) ? $data['total_alerts_validated'] : null;
        $this->container['total_explores_validated'] = isset($data['total_explores_validated']) ? $data['total_explores_validated'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets content_with_errors
     *
     * @return \Swagger\Client\Model\ContentValidatorError[]
     */
    public function getContentWithErrors()
    {
        return $this->container['content_with_errors'];
    }

    /**
     * Sets content_with_errors
     *
     * @param \Swagger\Client\Model\ContentValidatorError[] $content_with_errors A list of content errors
     *
     * @return $this
     */
    public function setContentWithErrors($content_with_errors)
    {
        $this->container['content_with_errors'] = $content_with_errors;

        return $this;
    }

    /**
     * Gets computation_time
     *
     * @return float
     */
    public function getComputationTime()
    {
        return $this->container['computation_time'];
    }

    /**
     * Sets computation_time
     *
     * @param float $computation_time Duration of content validation in seconds
     *
     * @return $this
     */
    public function setComputationTime($computation_time)
    {
        $this->container['computation_time'] = $computation_time;

        return $this;
    }

    /**
     * Gets total_looks_validated
     *
     * @return int
     */
    public function getTotalLooksValidated()
    {
        return $this->container['total_looks_validated'];
    }

    /**
     * Sets total_looks_validated
     *
     * @param int $total_looks_validated The number of looks validated
     *
     * @return $this
     */
    public function setTotalLooksValidated($total_looks_validated)
    {
        $this->container['total_looks_validated'] = $total_looks_validated;

        return $this;
    }

    /**
     * Gets total_dashboard_elements_validated
     *
     * @return int
     */
    public function getTotalDashboardElementsValidated()
    {
        return $this->container['total_dashboard_elements_validated'];
    }

    /**
     * Sets total_dashboard_elements_validated
     *
     * @param int $total_dashboard_elements_validated The number of dashboard elements validated
     *
     * @return $this
     */
    public function setTotalDashboardElementsValidated($total_dashboard_elements_validated)
    {
        $this->container['total_dashboard_elements_validated'] = $total_dashboard_elements_validated;

        return $this;
    }

    /**
     * Gets total_dashboard_filters_validated
     *
     * @return int
     */
    public function getTotalDashboardFiltersValidated()
    {
        return $this->container['total_dashboard_filters_validated'];
    }

    /**
     * Sets total_dashboard_filters_validated
     *
     * @param int $total_dashboard_filters_validated The number of dashboard filters validated
     *
     * @return $this
     */
    public function setTotalDashboardFiltersValidated($total_dashboard_filters_validated)
    {
        $this->container['total_dashboard_filters_validated'] = $total_dashboard_filters_validated;

        return $this;
    }

    /**
     * Gets total_scheduled_plans_validated
     *
     * @return int
     */
    public function getTotalScheduledPlansValidated()
    {
        return $this->container['total_scheduled_plans_validated'];
    }

    /**
     * Sets total_scheduled_plans_validated
     *
     * @param int $total_scheduled_plans_validated The number of scheduled plans validated
     *
     * @return $this
     */
    public function setTotalScheduledPlansValidated($total_scheduled_plans_validated)
    {
        $this->container['total_scheduled_plans_validated'] = $total_scheduled_plans_validated;

        return $this;
    }

    /**
     * Gets total_alerts_validated
     *
     * @return int
     */
    public function getTotalAlertsValidated()
    {
        return $this->container['total_alerts_validated'];
    }

    /**
     * Sets total_alerts_validated
     *
     * @param int $total_alerts_validated The number of alerts validated
     *
     * @return $this
     */
    public function setTotalAlertsValidated($total_alerts_validated)
    {
        $this->container['total_alerts_validated'] = $total_alerts_validated;

        return $this;
    }

    /**
     * Gets total_explores_validated
     *
     * @return int
     */
    public function getTotalExploresValidated()
    {
        return $this->container['total_explores_validated'];
    }

    /**
     * Sets total_explores_validated
     *
     * @param int $total_explores_validated The number of explores used across all content validated
     *
     * @return $this
     */
    public function setTotalExploresValidated($total_explores_validated)
    {
        $this->container['total_explores_validated'] = $total_explores_validated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


